
setup mutations that will hit external endpoints

   - create button that when clicked will call this trpc mutation ("send to project marking server")
   - the mutation will use axios to call the endpoint
   - we will create a zod schema to validate the response
   - we can then use the response to update our db if necessary (i.e when creating projects)

---

there are 2 endpoints that we need to hit 

create_projects
    Inputs: supervisor_guid, project_name, project_description, project_capacity, is_software_engineer_project, project_type, evaluation_required, special_technical_requirements
    Returns: project_id as created by your backend

    is_software_engineer_project and evaluation_required can be false, and project_type will be 0 if supervisor defined or 1 if student defined

assign_students
    Inputs: student_id, project_id
    Returns: error (0 for no error, 1 for project already at capacity, 2 for anything else)

we will have a button that we press, which will call a trpc mutation which handles all of the logic

--

the mutation will call the first endpoint, wait for a response, and if successful, it will then call the second endpoint


the first endpoint needs information about all of the allocated projects. One project requires all the information listed below - a schema will need to be created and type inferred

type ExternalProject = {
    project_id: string <-- this one should be our id, which they should return in the response alongside the new id
    supervisor_guid: string
    project_name: string
    project_description: string
    special_technical_requirements: string (needs to be added to db)
    project_capacity: number
    is_software_engineer_project: false (subject to change)
    project_type: number literal (0 | 1)
    evaluation_required: false
}

the endpoint payload should be of type ExternalProject[]

once we have all of this information from the database collected and formatted we are ready to call the external endpoint

the response we get needs to be parsed to ensure type safety

we need to construct a schema that will validate this response

it would look something like this

const responseSchema = z.array({
    external_project_id: z.string()
    internal_project_id: z.string()
})

const res = await axios.get()

const result = responseSchema.safeParse(res)

if result.ok -> then result.data is the type that you want
otherwise handle this error somehow

assuming all is okay

we can move on to the next step

we now need to update all of the projects with the external id we received

so go through the response.data, find the external_id of each project and update the database to reflect that


const responseData = [{internal_id:123, external_id:"abc"},{internal_id:1234, external_id:"abcd"}]

for (const project of responseData) {
    await tx.project.update({
        where:{
            id:internal_id
        },
        data:{
            externalId:external_id
        }
    })
}


can now call assign students