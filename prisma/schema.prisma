generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    SUPERVISOR
    STUDENT
}

enum AdminLevel {
    SUPER
    GROUP
    SUB_GROUP
}

enum Stage {
    SETUP
    PROJECT_SUBMISSION
    PROJECT_SELECTION
    PROJECT_ALLOCATION
    ALLOCATION_ADJUSTMENT
    ALLOCATION_PUBLICATION
}

enum AlgorithmFlag {
    MAXSIZE
    GEN
    GRE
    MINCOST
    MINSQCOST
    LSB
}

enum PreferenceType {
    SHORTLIST
    PREFERENCE
}

model UserInInstance {
    user                      User                        @relation(fields: [userId], references: [id])
    userId                    String                      @map("user_id")
    role                      Role
    // ---
    allocationGroupId         String                      @map("allocation_group_id")
    allocationSubGroupId      String                      @map("allocation_sub_group_id")
    allocationInstanceId      String                      @map("allocation_instance_id")
    // ---
    studentAllocation         ProjectAllocation?          @relation(name: "project_allocation")
    // TODO: figure out why this breaks the seed script
    // allocationInstance        AllocationInstance          @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id]) 
    supervisorInstanceDetails SupervisorInstanceDetails[] @relation(name: "supervisor_details")
    supervisorProjects        Project[]
    studentInstanceDetails    StudentInstanceDetails[]
    studentFlags              FlagOnStudent[]
    studentPreferences        Preference[]

    @@id([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model AdminInSpace {
    systemId             String              @id @default(uuid()) @map("system_id")
    user                 User                @relation(fields: [userId], references: [id])
    userId               String              @map("user_id")
    adminLevel           AdminLevel          @map("admin_level")
    // ---
    allocationGroupId    String?             @map("allocation_group_id")
    allocationSubGroupId String?             @map("allocation_sub_group_id")
    // ---
    allocationGroup      AllocationGroup?    @relation(fields: [allocationGroupId], references: [id])
    allocationSubGroup   AllocationSubGroup? @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, id])
}

model AllocationGroup {
    id                  String               @id
    displayName         String               @unique @map("display_name")
    allocationSubGroups AllocationSubGroup[]
    groupAdmins         AdminInSpace[]
}

model AllocationSubGroup {
    id                  String
    displayName         String               @map("display_name")
    // belongs to 1
    allocationGroup     AllocationGroup      @relation(fields: [allocationGroupId], references: [id])
    allocationGroupId   String               @map("allocation_group_id")
    // includes many
    allocationInstances AllocationInstance[]
    subGroupAdmins      AdminInSpace[]

    @@id([allocationGroupId, id])
}

model AllocationInstance {
    id                   String
    displayName          String             @map("display_name")
    stage                Stage              @default(SETUP)
    // has 1
    selectedAlgName      String?            @map("selected_alg_name")
    // belongs to 1
    allocationSubGroup   AllocationSubGroup @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, id])
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    // has many
    projects             Project[]
    algorithms           Algorithm[]
    // TODO: figure out why this breaks the seed script
    // users                UserInInstance[]

    @@id([allocationGroupId, allocationSubGroupId, id])
}

model SupervisorInstanceDetails {
    userId                      String         @map("user_id")
    // ---
    allocationGroupId           String         @map("allocation_group_id")
    allocationSubGroupId        String         @map("allocation_sub_group_id")
    allocationInstanceId        String         @map("allocation_instance_id")
    // ---
    userInInstance              UserInInstance @relation(name: "supervisor_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onUpdate: Cascade)
    // actual data
    projectAllocationLowerBound Int            @map("project_allocation_lower_bound")
    projectAllocationTarget     Int            @map("project_allocation_target")
    projectAllocationUpperBound Int            @map("project_allocation_upper_bound")

    @@id([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model StudentInstanceDetails {
    userId               String          @map("user_id")
    // ---
    allocationGroupId    String          @map("allocation_group_id")
    allocationSubGroupId String          @map("allocation_sub_group_id")
    allocationInstanceId String          @map("allocation_instance_id")
    // ---
    userInInstance       UserInInstance  @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onUpdate: Cascade)
    // actual data
    flags                FlagOnStudent[]

    @@id([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Project {
    id                   String              @id @default(uuid())
    title                String
    description          String
    capacityLowerBound   Int                 @map("capacity_lower_bound")
    capacityUpperBound   Int                 @map("capacity_upper_bound")
    supervisorId         String              @map("supervisor_id")
    // ---
    allocationInstance   AllocationInstance  @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id])
    supervisor           UserInInstance      @relation(fields: [supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    // ---
    allocationGroupId    String              @map("allocation_group_id")
    allocationSubGroupId String              @map("allocation_sub_group_id")
    allocationInstanceId String              @map("allocation_instance_id")
    // ---
    flagOnProjects       FlagOnProject[]
    tagOnProject         TagOnProject[]
    inStudentPreferences Preference[]
    allocations          ProjectAllocation[]
}

model Preference {
    project              Project        @relation(fields: [projectId], references: [id])
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    student              UserInInstance @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    // ---
    rank                 Float
    type                 PreferenceType

    @@id([projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model ProjectAllocation {
    project              Project        @relation(fields: [projectId], references: [id])
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    studentRanking       Int            @map("student_ranking")
    student              UserInInstance @relation(name: "project_allocation", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---

    @@id([projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Flag {
    id             String          @id @default(uuid())
    title          String          @unique
    // ---
    flagOnProjects FlagOnProject[]
    flagOnStudents FlagOnStudent[]
}

model FlagOnProject {
    flag      Flag    @relation(fields: [flagId], references: [id])
    flagId    String  @map("flag_id")
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")

    @@id([flagId, projectId])
}

model FlagOnStudent {
    flagId               String                 @map("flag_id")
    userId               String                 @map("user_id")
    // ---
    allocationGroupId    String                 @map("allocation_group_id")
    allocationSubGroupId String                 @map("allocation_sub_group_id")
    allocationInstanceId String                 @map("allocation_instance_id")
    // virtual fields
    flag                 Flag                   @relation(fields: [flagId], references: [id])
    studentDetails       StudentInstanceDetails @relation(map: "flags", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    UserInInstance       UserInInstance         @relation(map: "user_flags", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])

    @@id([flagId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Tag {
    id           String         @id @default(uuid())
    title        String         @unique
    tagOnProject TagOnProject[]
}

model TagOnProject {
    tag       Tag     @relation(fields: [tagId], references: [id])
    tagId     String  @map("tag_id")
    project   Project @relation(fields: [projectId], references: [id])
    projectId String  @map("project_id")

    @@id([tagId, projectId])
}

model Algorithm {
    algName              String             @map("alg_name")
    displayName          String             @map("display_name")
    description          String
    flag1                AlgorithmFlag      @map("flag_1")
    flag2                AlgorithmFlag?     @map("flag_2")
    flag3                AlgorithmFlag?     @map("flag_3")
    matchingResultData   Json               @map("matching_result_data")
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // --- belongs to 1
    allocationInstances  AllocationInstance @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id])

    @@id([algName, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Invitation {
    userEmail String @id @map("user_email")
    role      Role

    @@unique([userEmail, role])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(cuid())
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    role            Role?
    accounts        Account[]
    sessions        Session[]
    userInInstances UserInInstance[]
    adminSpaces     AdminInSpace[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
